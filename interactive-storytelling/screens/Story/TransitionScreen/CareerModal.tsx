import React, { useState } from "react";
import { View, Text, Modal, Pressable, FlatList, ImageBackground, Alert } from "react-native";
import styles from "./TransitionScreen2.styles";
import { RootStackParamList } from "../../../App";

// Map des comp√©tences vers les m√©tiers
export const careerToScreenMap: Record<string, keyof RootStackParamList> = {
    "Pr√©paration strat√©gique avanc√©e üé©": "StrategicPlannerStory",
    "Analyse situationnelle interm√©diaire üïµÔ∏è": "PoliceInvestigatorStory",
    "Manque de progression ‚è≥": "AdministrativeAssistantStory",
    "Adaptation sociale üï∫": "EventManagerStory",
    "Esprit d‚Äô√©quipe üéâ": "SportsManagerStory",
    "Prudence calcul√©e ‚è≥": "RiskAnalystStory",
    "Ouverture √©motionnelle ‚ù§Ô∏è": "TherapistStory",
    "Prudence dans les relations üë•": "RelationshipConsultantStory",
    "Pr√©caution excessive ‚è≥": "ArchivistStory",
    "Leadership naturel üåü": "InnovativeProjectManagerStory",
    "Esprit d‚Äô√©quipe ü§ù": "HumanitarianCoordinatorStory",
    "Opportunit√© manqu√©e ‚è≥": "GeneralSecretaryStory",
    "Esprit diplomatique ü§ù": "AmbassadorStory",
    "Loyaut√© affirm√©e üí™": "RightsDefenderStory",
    "√âchec d‚Äôengagement ‚è≥": "NeutralObserverStory",
    "Ambition cultiv√©e üåü": "InnovativeEntrepreneurStory",
    "Gestion du temps ‚è∞": "EfficiencyConsultantStory",
    "Compagnon fid√®le ü§ù": "CommunityMentorStory",
    "Pers√©v√©rance acad√©mique üìò": "UniversityProfessorStory",
    "Expression artistique üé®": "CreativeDirectorStory",
    "Relations authentiques ‚ù§Ô∏è": "FamilyMediatorStory",
};

type CareerModalProps = {
    visible: boolean;
    onClose: () => void;
    onCareerSelect: (career: string) => void;
    skills: string[];
};

const CareerModal: React.FC<CareerModalProps> = ({
    visible,
    onClose,
    onCareerSelect,
    skills,
}) => {
    const [selectedCareer, setSelectedCareer] = useState<string | null>(null);

    // G√©n√©ration des m√©tiers bas√©s sur les comp√©tences
    const careers = skills
        .map((skill) => ({
            skill,
            career: careerToScreenMap[skill] || null, // Associe chaque comp√©tence √† un m√©tier
        }))
        .filter((item) => item.career !== null);

    console.log("Comp√©tences transmises :", skills);
    console.log("M√©tiers disponibles :", careers);

    const handleConfirm = () => {
        if (selectedCareer) {
            onCareerSelect(selectedCareer);
            onClose();
        } else {
            Alert.alert("Erreur", "Veuillez s√©lectionner un m√©tier.");
        }
    };

    return (
        <Modal visible={visible} animationType="slide" onRequestClose={onClose}>
            <ImageBackground
                source={require("../../../assets/TeenageTransitionBackground.webp")}
                style={styles.background}
            >
                <View style={styles.container}>
                    <Text style={styles.title}>Choisissez votre m√©tier</Text>

                    {/* Liste des m√©tiers */}
                    <FlatList
                        data={careers}
                        keyExtractor={(item) => item.career as string}
                        renderItem={({ item }) => (
                            <Pressable
                                style={[
                                    styles.careerButton,
                                    selectedCareer === item.career && styles.selectedCareerButton,
                                ]}
                                onPress={() => setSelectedCareer(item.career as string)}
                            >
                                <Text style={styles.careerText}>{item.skill}</Text>
                            </Pressable>
                        )}
                        ListEmptyComponent={
                            <Text style={styles.careerText}>
                                Aucun m√©tier disponible pour vos comp√©tences.
                            </Text>
                        }
                    />

                    {/* Bouton pour confirmer */}
                    <Pressable
                        style={[
                            styles.confirmButton,
                            !selectedCareer && styles.disabledButton,
                        ]}
                        onPress={handleConfirm}
                        disabled={!selectedCareer}
                    >
                        <Text style={styles.confirmButtonText}>Confirmer</Text>
                    </Pressable>

                    {/* Bouton pour annuler */}
                    <Pressable style={styles.cancelButton} onPress={onClose}>
                        <Text style={styles.cancelButtonText}>Retour</Text>
                    </Pressable>
                </View>
            </ImageBackground>
        </Modal>
    );
};

export default CareerModal;
